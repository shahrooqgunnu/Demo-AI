# app.py ‚Äî Agentic AI for AWS (multi-service version with smart color-coded output)

import os
import pandas as pd
import streamlit as st
import boto3
from datetime import datetime
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_core.messages import SystemMessage, HumanMessage
import plotly.express as px

# ---------------------- LOAD ENV ----------------------
load_dotenv()
AWS_KEY = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_REGION = os.getenv("AWS_REGION") or "us-east-1"
OPENAI_KEY = os.getenv("OPENAI_API_KEY")

if not OPENAI_KEY:
    st.error("‚ö†Ô∏è Please set OPENAI_API_KEY in your .env file.")
    st.stop()

# ---------------------- PAGE CONFIG ----------------------
st.set_page_config(page_title="Agentic AI ‚Ä¢ Smart AWS", layout="wide")

# ---------------------- LIGHT THEME ----------------------
st.markdown("""
<style>
body {background-color:#f9f9f9;color:#111;font-family:"Inter",sans-serif;}
.stApp {background-color:#ffffff;color:#111;}
h1,h2,h3,h4 {color:#111;}
.stSidebar {background-color:#f1f3f6 !important;color:#111 !important;}
[data-testid="stSidebarNav"] {background-color:#f1f3f6 !important;}
.stChatMessage {border-radius:10px;padding:10px 14px;margin-bottom:8px;}
.stChatMessage.user {background-color:#e8e8ea;text-align:right;}
.stChatMessage.assistant {background-color:#ffffff;border:1px solid #e0e0e0;}
</style>
""", unsafe_allow_html=True)

# ---------------------- INIT ----------------------
@st.cache_resource
def init_llm():
    return ChatOpenAI(api_key=OPENAI_KEY, model="gpt-4o-mini", temperature=0.2)

@st.cache_resource
def init_aws_clients():
    session = boto3.Session(
        aws_access_key_id=AWS_KEY,
        aws_secret_access_key=AWS_SECRET,
        region_name=AWS_REGION
    )
    return {
        "session": session,
        "ec2": session.client("ec2"),
        "s3": session.client("s3"),
        "lambda": session.client("lambda"),
        "rds": session.client("rds"),
        "eks": session.client("eks"),
        "ecr": session.client("ecr"),
        "cloudfront": session.client("cloudfront"),
        "cloudwatch": session.client("cloudwatch"),
        "ce": session.client("ce", region_name="us-east-1")
    }

llm = init_llm()
clients = init_aws_clients()

# ---------------------- HELPERS ----------------------
def safe_call(fn, default=None):
    try:
        return fn()
    except Exception as e:
        return default if default is not None else f"‚ö†Ô∏è {e}"

def color_state(state):
    colors = {
        "available": "#16a34a",
        "active": "#16a34a",
        "running": "#16a34a",
        "creating": "#facc15",
        "stopped": "#dc2626",
        "failed": "#dc2626",
        "inactive": "#9ca3af"
    }
    color = colors.get(state.lower(), "#9ca3af")
    return f'<b style="color:{color}">{state.capitalize()}</b>'

# ---------------------- AWS SERVICE LISTS ----------------------
def list_ec2_details():
    def _():
        res = clients["ec2"].describe_instances()
        data = []
        for r in res.get("Reservations", []):
            for i in r.get("Instances", []):
                name = next((t["Value"] for t in i.get("Tags", []) if t["Key"] == "Name"), "N/A")
                data.append({
                    "Instance ID": i["InstanceId"],
                    "Name": name,
                    "Type": i["InstanceType"],
                    "State": i["State"]["Name"],
                    "Launch Time": i["LaunchTime"].strftime("%Y-%m-%d %H:%M:%S")
                })
        df = pd.DataFrame(data)
        if not df.empty:
            df["State"] = df["State"].apply(color_state)
        return df
    return safe_call(_, pd.DataFrame())

def list_rds_details():
    def _():
        res = clients["rds"].describe_db_instances()
        data = [{
            "DB Identifier": db["DBInstanceIdentifier"],
            "Engine": db["Engine"],
            "Status": db["DBInstanceStatus"],
            "Class": db["DBInstanceClass"],
            "Endpoint": db.get("Endpoint", {}).get("Address", "-")
        } for db in res.get("DBInstances", [])]
        df = pd.DataFrame(data)
        if not df.empty:
            df["Status"] = df["Status"].apply(color_state)
        return df
    return safe_call(_, pd.DataFrame())

def list_ecr_repositories():
    def _():
        res = clients["ecr"].describe_repositories()
        return [repo["repositoryName"] for repo in res.get("repositories", [])]
    return safe_call(_, [])

def list_eks_clusters():
    def _():
        clusters = clients["eks"].list_clusters().get("clusters", [])
        data = []
        for name in clusters:
            desc = clients["eks"].describe_cluster(name=name)["cluster"]
            data.append({
                "Cluster Name": name,
                "Status": desc["status"],
                "Version": desc["version"],
                "Created At": desc["createdAt"].strftime("%Y-%m-%d")
            })
        df = pd.DataFrame(data)
        if not df.empty:
            df["Status"] = df["Status"].apply(color_state)
        return df
    return safe_call(_, pd.DataFrame())

def list_lambda_details():
    def _():
        res = clients["lambda"].list_functions()
        data = [{
            "Function Name": f["FunctionName"],
            "Runtime": f.get("Runtime", "-"),
            "Last Modified": f.get("LastModified", "-")
        } for f in res.get("Functions", [])]
        return pd.DataFrame(data)
    return safe_call(_, pd.DataFrame())

def list_cloudfront_distributions():
    def _():
        res = clients["cloudfront"].list_distributions()
        items = res.get("DistributionList", {}).get("Items", [])
        return pd.DataFrame([{
            "ID": d["Id"],
            "Domain": d["DomainName"],
            "Status": d["Status"],
            "Enabled": d["Enabled"]
        } for d in items])
    return safe_call(_, pd.DataFrame())

def list_cloudwatch_metrics():
    def _():
        res = clients["cloudwatch"].list_metrics(Namespace="AWS/EC2")
        metrics = res.get("Metrics", [])
        return pd.DataFrame(metrics[:10]) if metrics else pd.DataFrame()
    return safe_call(_, pd.DataFrame())

def get_monthly_costs(months=6):
    ce = clients["ce"]
    today = datetime.utcnow().date()
    start = (pd.Timestamp(today).replace(day=1) - pd.DateOffset(months=months - 1)).date().strftime("%Y-%m-%d")
    end = (today + pd.DateOffset(days=1)).strftime("%Y-%m-%d")
    resp = ce.get_cost_and_usage(TimePeriod={"Start": start, "End": end},
                                 Granularity="MONTHLY", Metrics=["UnblendedCost"])
    months, totals = [], []
    for r in resp["ResultsByTime"]:
        months.append(r["TimePeriod"]["Start"])
        totals.append(float(r["Total"]["UnblendedCost"]["Amount"]))
    df = pd.DataFrame({"Month": months, "Cost": totals})
    df["Month"] = pd.to_datetime(df["Month"]).dt.strftime("%b %Y")
    return df

# ---------------------- SMART QUERY HANDLER ----------------------
def process_query(q: str):
    ql = q.lower()

    # EC2
    if "ec2" in ql:
        df = list_ec2_details()
        if "running" in ql:
            df = df[df["State"].str.contains("running", case=False)]
            title = "üü¢ Running EC2 Instances"
        elif "stopped" in ql:
            df = df[df["State"].str.contains("stopped", case=False)]
            title = "üî¥ Stopped EC2 Instances"
        else:
            title = "üñ•Ô∏è All EC2 Instances"
        if df.empty: return "No EC2 instances found."
        st.markdown(f"### {title}")
        st.markdown(df.to_html(escape=False, index=False), unsafe_allow_html=True)
        return f"‚úÖ {title} displayed with color indicators."

    # RDS
    elif "rds" in ql:
        df = list_rds_details()
        if df.empty: return "‚ö†Ô∏è No RDS instances found."
        st.markdown("### üóÑÔ∏è Amazon RDS Databases")
        st.markdown(df.to_html(escape=False, index=False), unsafe_allow_html=True)
        return "‚úÖ RDS instances listed successfully."

    # EKS
    elif "eks" in ql:
        df = list_eks_clusters()
        if df.empty: return "‚ö†Ô∏è No EKS clusters found."
        st.markdown("### ‚ò∏Ô∏è EKS Clusters")
        st.markdown(df.to_html(escape=False, index=False), unsafe_allow_html=True)
        return "‚úÖ EKS clusters listed successfully."

    # ECR
    elif "ecr" in ql:
        ecrs = list_ecr_repositories()
        return "üê≥ **ECR Repositories:**\n" + ("\n".join(ecrs) if ecrs else "‚ö†Ô∏è No ECR repositories found.")

    # Lambda
    elif "lambda" in ql:
        df = list_lambda_details()
        if df.empty: return "‚ö†Ô∏è No Lambda functions found."
        st.markdown("### ‚ö° AWS Lambda Functions")
        st.markdown(df.to_html(escape=False, index=False), unsafe_allow_html=True)
        return "‚úÖ Lambda functions listed."

    # S3
    elif "s3" in ql:
        s3s = [b["Name"] for b in clients["s3"].list_buckets().get("Buckets", [])]
        return "ü™£ **S3 Buckets:**\n" + ("\n".join(s3s) if s3s else "‚ö†Ô∏è No S3 buckets found.")

    # CloudFront
    elif "cloudfront" in ql:
        df = list_cloudfront_distributions()
        if df.empty: return "‚ö†Ô∏è No CloudFront distributions found."
        st.markdown("### üåç CloudFront Distributions")
        st.markdown(df.to_html(escape=False, index=False), unsafe_allow_html=True)
        return "‚úÖ CloudFront distributions listed."

    # CloudWatch
    elif "cloudwatch" in ql:
        df = list_cloudwatch_metrics()
        if df.empty: return "‚ö†Ô∏è No CloudWatch metrics found."
        st.markdown("### üìà CloudWatch Metrics (sample)")
        st.dataframe(df.head(10))
        return "‚úÖ CloudWatch metrics displayed."

    # Cost Explorer
    elif any(w in ql for w in ["cost", "bill", "spend", "charges"]):
        df = get_monthly_costs()
        if not df.empty:
            st.plotly_chart(px.line(df, x="Month", y="Cost", markers=True,
                                    title="AWS Monthly Cost Trend"), use_container_width=True)
        return "‚úÖ Cost Explorer data visualized."

    else:
        res = llm.invoke([
            SystemMessage(content="You are an AWS expert assistant that explains and helps manage AWS resources."),
            HumanMessage(content=q)
        ])
        return res.content

# ---------------------- SIDEBAR NAV ----------------------
page = st.sidebar.radio("Navigation", ["üè† Home", "üí¨ Chat Assistant", "üìä Cost Insights"])

# ---------------------- HOME ----------------------
if page == "üè† Home":
    st.title("üè† AWS Overview Dashboard")
    df_ec2 = list_ec2_details()
    s3s = [b["Name"] for b in clients["s3"].list_buckets().get("Buckets", [])]
    lambdas = list_lambda_details()
    df_cost = get_monthly_costs()

    col1, col2 = st.columns(2)
    with col1:
        st.metric("EC2 Instances", len(df_ec2))
        st.metric("S3 Buckets", len(s3s))
        st.metric("Lambda Functions", len(lambdas))
    with col2:
        if not df_cost.empty:
            st.metric("Current Month Cost ($)", round(df_cost["Cost"].iloc[-1], 2))

    st.markdown("### üñ•Ô∏è EC2 Instance Status")
    if not df_ec2.empty:
        st.markdown(df_ec2.to_html(escape=False, index=False), unsafe_allow_html=True)
    else:
        st.info("No EC2 instances found.")

    st.markdown("### üíµ Monthly Cost Trend")
    if not df_cost.empty:
        st.plotly_chart(px.line(df_cost, x="Month", y="Cost", markers=True, title="AWS Cost (6 Months)"),
                        use_container_width=True)

# ---------------------- CHAT ----------------------
elif page == "üí¨ Chat Assistant":
    st.title("üí¨ Agentic AI Chat for AWS")
    if "messages" not in st.session_state:
        st.session_state.messages = []
    for msg in st.session_state.messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])
    user_input = st.chat_input("Ask something about your AWS...")
    if user_input:
        st.session_state.messages.append({"role": "user", "content": user_input})
        with st.chat_message("assistant"):
            with st.spinner("Analyzing your AWS data..."):
                reply = process_query(user_input)
                if reply:
                    st.markdown(reply)
        st.session_state.messages.append({"role": "assistant", "content": reply})

# ---------------------- COST INSIGHTS ----------------------
elif page == "üìä Cost Insights":
    st.title("üìä AWS Cost Explorer")
    df_cost = get_monthly_costs()
    if df_cost.empty:
        st.warning("No cost data found.")
    else:
        st.plotly_chart(px.bar(df_cost, x="Month", y="Cost", title="Monthly AWS Cost (USD)"), use_container_width=True)
        st.plotly_chart(px.line(df_cost, x="Month", y="Cost", markers=True, title="Cost Trend Over Time"),
                        use_container_width=True)

st.caption("‚ö° Agentic AI ‚Ä¢ AWS Intelligence Dashboard")
